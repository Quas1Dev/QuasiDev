{"version":3,"file":"../assets/scripts/general-script.min.js","mappings":"AAAA","sources":["webpack://techandinfo/./assets/scripts/sources/general-script.js"],"sourcesContent":["(function() {\r\n    'use strict';\r\n    /**\r\n     * =============\r\n     * Go-to-top button config\r\n     * =============\r\n     */\r\n    var goToTop = {\r\n        init: function() {\r\n            goToTop.showBtn();\r\n            setTimeout(goToTop.btnClick(),0);\r\n        },\r\n        btnClick: function() {\r\n            var goToTopBtn = document.getElementById('go-to-top-button');\r\n            goToTopBtn.addEventListener('click', function() {\r\n                document.body.scrollTop = 0;\r\n                document.documentElement.scrollTop = 0;\r\n            });\r\n        },\r\n        showBtn: function() {\r\n            var goToTopBtn = document.getElementById('go-to-top-button');\r\n            goToTopBtn.style.opacity = document.body.scrollTop > 100 || document.documentElement.scrollTop > 100 ? \"1\" : \"0\";\r\n        }\r\n\r\n    }\r\n    /**\r\n     * =============\r\n     * End go-to-top button config\r\n     * =============\r\n     */\r\n\r\n    /**\r\n     * ==================\r\n     *  LAZYLOAD\r\n     * ==================\r\n     */\r\n    let lazyload = {\r\n        // Instructions to the IntersectionObserver\r\n        init: function() {\r\n            // Add polyfills if necessary\r\n            if (!'IntersectionObserver' in window) { lazyload.apiPoly() }\r\n            if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) { lazyload.intersectingPoly() }\r\n\r\n            // Create a new instersection oberserver\r\n            var ob = new IntersectionObserver(function(entries, self) {\r\n                entries.forEach(function(entry) {\r\n                    if (entry.isIntersecting) {\r\n                        var el = entry.target;\r\n\r\n                        if (el.tagName == \"PICTURE\") {\r\n                            var sources = el.querySelectorAll('source');\r\n                            sources.forEach(function(source) {\r\n                                source.srcset = source.dataset.srcset;\r\n                            })\r\n                        } else if (el.tagName == \"IMG\" ||\r\n                            el.tagName == \"IFRAME\") {\r\n\r\n                            el.src = el.dataset.src;\r\n                        }\r\n\r\n                        self.unobserve(el);\r\n                    }\r\n                });\r\n            }, {\r\n                threshold: 0,\r\n                // This will trigger the image load before its containing element reaches\r\n                // its actual border.\r\n                rootMargin: \"100px\",\r\n                root: null\r\n            })\r\n\r\n            lazyload.setElements(ob);\r\n        },\r\n        setElements: function(ob) {\r\n            // Find the elements to be monitored\r\n            var lazyElements = document.querySelectorAll('.lazy');\r\n\r\n            // Set the observer just created to monitor the selected\r\n            // elements.\r\n            lazyElements.forEach(function(lazyElement) {\r\n                ob.observe(lazyElement);\r\n            })\r\n\r\n        },\r\n        intersectingPoly: function() {\r\n            Object.defineProperty(window.IntersectionObserverEntry.prototype,\r\n                'isIntersecting', {\r\n                    get: function() {\r\n                        return this.intersectionRatio > 0;\r\n                    }\r\n                });\r\n        },\r\n        apiPoly: function() {\r\n            // Add pollyfill if necessary\r\n            var el = document.createElement('script');\r\n            el.src = \"polyfills/inob.min.js\";\r\n            // This will summon the function that creates the observer\r\n            // and starts monitoring as soon as the polyfill gets loaded.\r\n            document.head.appendChild(el);\r\n        }\r\n    }\r\n    /*== END LAZYLOAD ==*/\r\n\r\n    /*==  ADJUST ELEMENTS ON RESIZE ==*/\r\n    window.addEventListener(\"resize\", fnResizeCaller, false);\r\n\r\n    var fnResizeCallTimer = null;\r\n\r\n    function fnResizeCaller() {\r\n        // Debouncing resize function execution until user is done resizing\r\n        // https://medium.com/@vaibhavar/ui-performance-window-resize-handler-debouncing-2ec5f7432165\r\n        clearTimeout(fnResizeCallTimer);\r\n        fnResizeCallTimer = setTimeout(fnResize, 200);\r\n    }\r\n\r\n    var passed = false;\r\n\r\n    function fnResize() {\r\n        // Detect when window's width is over 980px, then hide panels and\r\n        // diactivate their togglers.\r\n        if (!passed && window.innerWidth > 980) {\r\n            hidePanels()\r\n            passed = true;\r\n        } else if (window.innerWidth <= 980) {\r\n            // Set to false once window's width is lower than 980px\r\n            // This is necessary so the if statement is executed only\r\n            // when hiding panels is needed.\r\n            passed = false;\r\n        }\r\n    }\r\n    /*== END ADJUST ELEMENTS ON RESIZE ==*/\r\n\r\n    /*== ADJUST ELEMENTS ON MOUSEUP ==*/\r\n\r\n    // Add event listeners to togglers - Show or hide target elements\r\n    var togglers = Array.from(document.querySelectorAll('.toggle'));\r\n\r\n    togglers.forEach((item, i) => {\r\n      item.addEventListener('mouseup', function (e) {\r\n          var toggler = e.target.closest('.toggle');\r\n          toggler.classList.toggle('change');\r\n          document.getElementById(toggler.dataset.target).classList.toggle('show');\r\n          // Hide all other pannels and undo any toggler animation\r\n          hidePanels(toggler);\r\n\r\n          // Prevents a mouseup event to execute on window\r\n          e.stopPropagation();\r\n      })\r\n    });\r\n\r\n    function hidePanels(activeToggler = null) {\r\n        var togglers = Array.from(document.getElementsByClassName('toggle'));\r\n\r\n        togglers.forEach(function(toggler) {\r\n          if (toggler != activeToggler) {\r\n            toggler.classList.remove(\"change\");\r\n            document.getElementById(toggler.dataset.target).classList.remove('show')\r\n          }\r\n        })\r\n    }\r\n\r\n    window.addEventListener('mouseup', function(e) {\r\n      // Clicked element == One displayed as a result of clicking on a toggler ?\r\n      if (!e.target.closest('.show')) {\r\n        // Close all togglers and hide controlled panels\r\n        hidePanels();\r\n      }\r\n    })\r\n    /*== END ADJUST ELEMENTS ON MOUSEUP ==*/\r\n\r\n    /* Menu close button */\r\n    document.getElementById(\"closeMenu\").addEventListener(\"mouseup\",\r\n        function(e) {\r\n            hidePanels();\r\n            e.stopPropagation();\r\n        });\r\n\r\n    /* End menu close button */\r\n\r\n    /* Cookies MessageBox close button */\r\n    var cookieBox = document.getElementById(\"cookies\");\r\n    document.getElementById(\"closeCookies\").addEventListener(\"mouseup\",\r\n        function(e) {\r\n            cookieBox.classList.remove(\"show\");\r\n            localStorage.setItem('closedCookies', 'true');\r\n            e.stopPropagation();\r\n        }\r\n    );\r\n    /* End Cookies MessageBox close button */\r\n\r\n    if (!localStorage.getItem('closedCookies')) {\r\n        document.getElementById(\"cookies\").classList.add('show');\r\n    }\r\n\r\n    var search = {\r\n        init: function() {\r\n            // Create a new instersection oberserver\r\n            var ob = new IntersectionObserver(function(entries, self) {\r\n                entries.forEach(function(entry) {\r\n                    if (entry.isIntersecting) {\r\n                        search.loadcse();\r\n                        search.setCookie();\r\n                        self.unobserve(entry.target);\r\n                    }\r\n                })\r\n            });\r\n            ob.observe(document.getElementById('search'));\r\n        },\r\n        loadcse: function() {\r\n            var script = document.createElement('script');\r\n            script.src = 'https://cse.google.com/cse.js?cx=a58e9417228cb9070';\r\n            document.head.appendChild(script);\r\n        },\r\n        setCookie: function() {\r\n            localStorage.setItem('clickedSearch', 'true');\r\n        }\r\n    }\r\n\r\n    goToTop.init();\r\n    setTimeout(lazyload.init(),0);\r\n    setTimeout(search.init(),0);\r\n    window.addEventListener(\"scroll\", function() {\r\n        goToTop.showBtn();\r\n    });\r\n})();\r\n"],"names":[],"sourceRoot":""}