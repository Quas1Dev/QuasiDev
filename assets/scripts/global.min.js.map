{"version":3,"file":"../assets/scripts/global.min.js","mappings":"AAAA","sources":["webpack://techandinfo/./assets/scripts/sources/global.js"],"sourcesContent":["(function() {\n    'use strict';\n    /**\n     * =============\n     * Go-to-top button config\n     * =============\n     */\n    var goToTop = {\n        init: function() {\n            goToTop.showBtn();\n            setTimeout(goToTop.btnClick(),0);\n        },\n        btnClick: function() {\n            var goToTopBtn = document.getElementById('go-to-top-button');\n            goToTopBtn.addEventListener('click', function() {\n                document.body.scrollTop = 0;\n                document.documentElement.scrollTop = 0;\n            });\n        },\n        showBtn: function() {\n            var goToTopBtn = document.getElementById('go-to-top-button');\n            goToTopBtn.style.opacity = document.body.scrollTop > 100 || document.documentElement.scrollTop > 100 ? \"1\" : \"0\";\n        }\n\n    }\n    /**\n     * =============\n     * End go-to-top button config\n     * =============\n     */\n\n    /**\n     * ==================\n     *  LAZYLOAD\n     * ==================\n     */\n    let lazyload = {\n        // Instructions to the IntersectionObserver\n        init: function() {\n            // Add polyfills if necessary\n            if (!'IntersectionObserver' in window) { lazyload.apiPoly() }\n            if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) { lazyload.intersectingPoly() }\n\n            // Create a new instersection oberserver\n            var ob = new IntersectionObserver(function(entries, self) {\n                entries.forEach(function(entry) {\n                    if (entry.isIntersecting) {\n                        var el = entry.target;\n\n                        if (el.tagName == \"PICTURE\") {\n                            var sources = el.querySelectorAll('source');\n                            sources.forEach(function(source) {\n                                source.srcset = source.dataset.srcset;\n                            })\n                        } else if (el.tagName == \"IMG\" ||\n                            el.tagName == \"IFRAME\") {\n\n                            el.src = el.dataset.src;\n                        }\n\n                        self.unobserve(el);\n                    }\n                });\n            }, {\n                threshold: 0,\n                // This will trigger the image load before its containing element reaches\n                // its actual border.\n                rootMargin: \"100px\",\n                root: null\n            })\n\n            lazyload.setElements(ob);\n        },\n        setElements: function(ob) {\n            // Find the elements to be monitored\n            var lazyElements = document.querySelectorAll('.lazy');\n\n            // Set the observer just created to monitor the selected\n            // elements.\n            lazyElements.forEach(function(lazyElement) {\n                ob.observe(lazyElement);\n            })\n\n        },\n        intersectingPoly: function() {\n            Object.defineProperty(window.IntersectionObserverEntry.prototype,\n                'isIntersecting', {\n                    get: function() {\n                        return this.intersectionRatio > 0;\n                    }\n                });\n        },\n        apiPoly: function() {\n            // Add pollyfill if necessary\n            var el = document.createElement('script');\n            el.src = \"polyfills/inob.min.js\";\n            // This will summon the function that creates the observer\n            // and starts monitoring as soon as the polyfill gets loaded.\n            document.head.appendChild(el);\n        }\n    }\n    /*== END LAZYLOAD ==*/\n\n    /*==  ADJUST ELEMENTS ON RESIZE ==*/\n    window.addEventListener(\"resize\", fnResizeCaller, false);\n\n    var fnResizeCallTimer = null;\n\n    function fnResizeCaller() {\n        // Debouncing resize function execution until user is done resizing\n        // https://medium.com/@vaibhavar/ui-performance-window-resize-handler-debouncing-2ec5f7432165\n        clearTimeout(fnResizeCallTimer);\n        fnResizeCallTimer = setTimeout(fnResize, 200);\n    }\n\n    var passed = false;\n\n    function fnResize() {\n        // Detect when window's width is over 980px, then hide panels and\n        // diactivate their togglers.\n        if (!passed && window.innerWidth > 980) {\n            hidePanels()\n            passed = true;\n        } else if (window.innerWidth <= 980) {\n            // Set to false once window's width is lower than 980px\n            // This is necessary so the if statement is executed only\n            // when hiding panels is needed.\n            passed = false;\n        }\n    }\n    /*== END ADJUST ELEMENTS ON RESIZE ==*/\n\n    /*== ADJUST ELEMENTS ON MOUSEUP ==*/\n\n    // Add event listeners to togglers - Show or hide target elements\n    var togglers = Array.from(document.querySelectorAll('.toggle'));\n\n    togglers.forEach((item, i) => {\n      item.addEventListener('mouseup', function (e) {\n          var toggler = e.target.closest('.toggle');\n          toggler.classList.toggle('change');\n          document.getElementById(toggler.dataset.target).classList.toggle('show');\n          // Hide all other pannels and undo any toggler animation\n          hidePanels(toggler);\n\n          // Prevents a mouseup event to execute on window\n          e.stopPropagation();\n      })\n    });\n\n    function hidePanels(activeToggler = null) {\n        var togglers = Array.from(document.getElementsByClassName('toggle'));\n\n        togglers.forEach(function(toggler) {\n          if (toggler != activeToggler) {\n            toggler.classList.remove(\"change\");\n            document.getElementById(toggler.dataset.target).classList.remove('show')\n          }\n        })\n    }\n\n    window.addEventListener('mouseup', function(e) {\n      // Clicked element == One displayed as a result of clicking on a toggler ?\n      if (!e.target.closest('.show')) {\n        // Close all togglers and hide controlled panels\n        hidePanels();\n      }\n    })\n    /*== END ADJUST ELEMENTS ON MOUSEUP ==*/\n\n    /* Menu close button */\n    document.getElementById(\"closeMenu\").addEventListener(\"mouseup\",\n        function(e) {\n            hidePanels();\n            e.stopPropagation();\n        });\n\n    /* End menu close button */\n\n    /* Cookies MessageBox close button */\n    var cookieBox = document.getElementById(\"cookies\");\n    document.getElementById(\"closeCookies\").addEventListener(\"mouseup\",\n        function(e) {\n            cookieBox.classList.remove(\"show\");\n            localStorage.setItem('closedCookies', 'true');\n            e.stopPropagation();\n        }\n    );\n    /* End Cookies MessageBox close button */\n\n    if (!localStorage.getItem('closedCookies')) {\n        document.getElementById(\"cookies\").classList.add('show');\n    }\n\n    var search = {\n        init: function() {\n            // Create a new instersection oberserver\n            var ob = new IntersectionObserver(function(entries, self) {\n                entries.forEach(function(entry) {\n                    if (entry.isIntersecting) {\n                        search.loadcse();\n                        search.setCookie();\n                        self.unobserve(entry.target);\n                    }\n                })\n            });\n            ob.observe(document.getElementById('search'));\n        },\n        loadcse: function() {\n            var script = document.createElement('script');\n            script.src = 'https://cse.google.com/cse.js?cx=a58e9417228cb9070';\n            document.head.appendChild(script);\n        },\n        setCookie: function() {\n            localStorage.setItem('clickedSearch', 'true');\n        }\n    }\n\n    goToTop.init();\n    setTimeout(lazyload.init(),0);\n    setTimeout(search.init(),0);\n    window.addEventListener(\"scroll\", function() {\n        goToTop.showBtn();\n    });\n})();\n"],"names":[],"sourceRoot":""}